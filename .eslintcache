[{"/Users/karacaputo/turing/3module/projects/urban-stargazer/src/index.js":"1","/Users/karacaputo/turing/3module/projects/urban-stargazer/src/reportWebVitals.js":"2","/Users/karacaputo/turing/3module/projects/urban-stargazer/src/App/index.jsx":"3","/Users/karacaputo/turing/3module/projects/urban-stargazer/src/Discover/index.jsx":"4","/Users/karacaputo/turing/3module/projects/urban-stargazer/src/Header/index.jsx":"5","/Users/karacaputo/turing/3module/projects/urban-stargazer/src/Saved/index.jsx":"6","/Users/karacaputo/turing/3module/projects/urban-stargazer/src/Home/index.jsx":"7","/Users/karacaputo/turing/3module/projects/urban-stargazer/src/Card/index.jsx":"8","/Users/karacaputo/turing/3module/projects/urban-stargazer/src/SavedModal/index.jsx":"9","/Users/karacaputo/turing/3module/projects/urban-stargazer/src/utilities/utilities.js":"10","/Users/karacaputo/turing/3module/projects/urban-stargazer/src/apiCalls/apiCalls.js":"11"},{"size":313,"mtime":1610726170558,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":1610562404973,"results":"14","hashOfConfig":"13"},{"size":757,"mtime":1610919540093,"results":"15","hashOfConfig":"13"},{"size":3580,"mtime":1611012871186,"results":"16","hashOfConfig":"13"},{"size":493,"mtime":1610995827684,"results":"17","hashOfConfig":"13"},{"size":2282,"mtime":1610995827686,"results":"18","hashOfConfig":"13"},{"size":1134,"mtime":1611014684589,"results":"19","hashOfConfig":"13"},{"size":479,"mtime":1611012871185,"results":"20","hashOfConfig":"13"},{"size":1286,"mtime":1611012871188,"results":"21","hashOfConfig":"13"},{"size":386,"mtime":1610995827690,"results":"22","hashOfConfig":"13"},{"size":608,"mtime":1611012781948,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"14m6swu",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"/Users/karacaputo/turing/3module/projects/urban-stargazer/src/index.js",[],["50","51"],"/Users/karacaputo/turing/3module/projects/urban-stargazer/src/reportWebVitals.js",[],["52","53"],"/Users/karacaputo/turing/3module/projects/urban-stargazer/src/App/index.jsx",["54","55"],"import React, { useState, useEffect } from 'react';\nimport { Route } from 'react-router-dom';\nimport Home from '../Home';\nimport Header from '../Header';\nimport Discover from '../Discover';\nimport Saved from '../Saved';\nimport nasaLogo from '../assets/NASA_Worm_logo.png';\nimport './App.scss';\n\nconst App = () => {\n\n  return(\n    <main id='app-main'>\n      <Header />\n      <Route exact path='/home' component={Home} />\n      <Route exact path='/discover' component={Discover} /> \n      <Route exact path='/saved' component={Saved} />\n      <footer id='footer'>\n        <p>Photos brought to you by NASA's Astronomy Picture of the Day archive</p>\n        <img id='logo' src={nasaLogo} alt='NASA logo' />\n      </footer>\n    </main>\n  )\n}\n\nexport default App;","/Users/karacaputo/turing/3module/projects/urban-stargazer/src/Discover/index.jsx",["56","57","58"],"import React, { useEffect, useState, useParams } from 'react';\nimport { fetchPictureFromDate } from '../apiCalls/apiCalls';\nimport { EmailShareButton, FacebookShareButton, TwitterShareButton } from \"react-share\";\nimport { BsStar, BsFillStarFill, BsLink45Deg } from 'react-icons/bs';\nimport { IconContext } from 'react-icons/lib';\nimport { saveToLocalStorage, filterData } from '../utilities/utilities';\nimport './Discover.scss';\n\nconst Discover = (props) => {\n  const [image, setImage] = useState({});\n  const [isSaved, setIsSaved] = useState(false);\n\n  const { title, url, explanation, date } = image;\n\n  useEffect(() => {\n    generateRandomImage();\n    checkSavedForImage();\n  }, []);\n\n  const checkSavedForImage = () => {\n    const savedImages = retrieveFromLocalStorage();\n    const alreadySaved = savedImages.find(savedImage => {\n      return savedImage.date === image.date;\n    })\n    if (alreadySaved) {\n      setIsSaved(true);\n    } else {\n      setIsSaved(false);\n    }\n  }\n\n  const generateRandomImage = () => {\n    const date = generateRandomDate();\n\n    fetchPictureFromDate(date)\n    .then(data => {\n      const image = filterData(data);\n      setImage(image);\n    })\n    .catch(error => console.log(error))\n    console.log(image)\n  }\n\n  const generateRandomDate = () => {\n    const year = `20${getRandomValue(20)}`;\n    const month = `${getRandomValue(12)}`\n    const day = `${getRandomValue(28)}`\n\n    return `${year}-${month}-${day}`;\n  }\n\n  // date function\n  const getRandomValue = (multiple) => {\n    let value = Math.floor((Math.random() *  multiple) + 1)\n    value = value.toString();\n\n    if (value.length < 2) {\n      value = '0' + value;\n    }\n    return value;\n  }\n\n  const handleDiscoverClick = () => {\n    generateRandomImage();\n  }\n\n  const retrieveFromLocalStorage = () => {\n    const retrievedImages = localStorage.getItem('savedImages')\n    return JSON.parse(retrievedImages)\n  }\n\n  const handleToggleSave = () => {\n    isSaved === false ? saveImage() : removeFromSaved();\n  }\n\n  const saveImage = () => {\n    let imagesToSave = [];\n    \n    const images = retrieveFromLocalStorage();\n    if (images) {\n      imagesToSave.push(images) \n    }\n    imagesToSave.push(image)\n    imagesToSave = imagesToSave.flat();\n\n    saveToLocalStorage(imagesToSave);\n    setIsSaved(true);\n  }\n\n  const removeFromSaved = () => {\n    const { date } = image;\n    const images = retrieveFromLocalStorage();\n\n    const newSavedImages = images.filter(savedImage => {\n      return savedImage.date !== date;\n    })\n    saveToLocalStorage(newSavedImages);\n    setIsSaved(false);\n  }\n\n  const generateLink = () => {\n\n  }\n\n  return(\n    <IconContext.Provider value={{ color: 'white' }}>\n      <main id='discover-main'>\n        <section id='image-box'>\n          <img src={`${url}`} id='image' alt={`${title} from ${date}`}/>\n        </section>\n\n        <h2 id='image-title'>{`${image.title}`}</h2>\n\n        <section id='button-box'>\n          <BsLink45Deg className='media-icons' onClick={() => {generateLink()}} alt='Get link' data-testid='link-icon' />\n          {isSaved === false ? \n            <BsStar className='media-icons' onClick={() => {handleToggleSave()}} alt='Save image' data-testid='save-icon'/> :\n            <BsFillStarFill className='media-icons' onClick={() => {handleToggleSave()}} alt='Remove from Saved' />\n          }\n          <button className='media-icons' onClick={() => {handleDiscoverClick()}} data-testid='discover-again'>Discover Again</button>\n        </section>\n\n        <section className='explanation-box'>\n          <p id='explanation'>{`${image.explanation}`}</p>\n        </section>\n      </main>\n    </IconContext.Provider>\n  ) \n}\n\nexport default Discover;","/Users/karacaputo/turing/3module/projects/urban-stargazer/src/Header/index.jsx",[],"/Users/karacaputo/turing/3module/projects/urban-stargazer/src/Saved/index.jsx",[],"/Users/karacaputo/turing/3module/projects/urban-stargazer/src/Home/index.jsx",[],"/Users/karacaputo/turing/3module/projects/urban-stargazer/src/Card/index.jsx",[],"/Users/karacaputo/turing/3module/projects/urban-stargazer/src/SavedModal/index.jsx",[],"/Users/karacaputo/turing/3module/projects/urban-stargazer/src/utilities/utilities.js",[],"/Users/karacaputo/turing/3module/projects/urban-stargazer/src/apiCalls/apiCalls.js",[],{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","replacedBy":"62"},{"ruleId":"59","replacedBy":"63"},{"ruleId":"61","replacedBy":"64"},{"ruleId":"65","severity":1,"message":"66","line":1,"column":17,"nodeType":"67","messageId":"68","endLine":1,"endColumn":25},{"ruleId":"65","severity":1,"message":"69","line":1,"column":27,"nodeType":"67","messageId":"68","endLine":1,"endColumn":36},{"ruleId":"65","severity":1,"message":"70","line":1,"column":38,"nodeType":"67","messageId":"68","endLine":1,"endColumn":47},{"ruleId":"65","severity":1,"message":"71","line":12,"column":23,"nodeType":"67","messageId":"68","endLine":12,"endColumn":34},{"ruleId":"72","severity":1,"message":"73","line":17,"column":6,"nodeType":"74","endLine":17,"endColumn":8,"suggestions":"75"},"no-native-reassign",["76"],"no-negated-in-lhs",["77"],["76"],["77"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useParams' is defined but never used.","'explanation' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'checkSavedForImage' and 'generateRandomImage'. Either include them or remove the dependency array.","ArrayExpression",["78"],"no-global-assign","no-unsafe-negation",{"desc":"79","fix":"80"},"Update the dependencies array to be: [checkSavedForImage, generateRandomImage]",{"range":"81","text":"82"},[584,586],"[checkSavedForImage, generateRandomImage]"]